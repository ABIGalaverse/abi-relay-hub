// SPDX-License-Identifier: GPL-3.0-only
pragma solidity ^0.8.6;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

import "../interfaces/IERC20.sol";

contract SimpleToken is ERC20, IERC20PeggedToken {

    // we store symbol and name as bytes32
    bytes32 internal _symbol;
    bytes32 internal _name;

    // cross chain bridge (owner)
    address internal _owner;

    // origin address and chain id
    address internal _originAddress;
    uint256 internal _originChain;

    constructor() ERC20("", "") {
    }

    function initialize(bytes32 symbol, bytes32 name, uint256 originChain, address originAddress) public emptyOwner {
        // remember owner of the smart contract (only cross chain bridge)
        _owner = msg.sender;
        // remember new symbol and name
        _symbol = symbol;
        _name = name;
        // store origin address and chain id (where the original token exists)
        _originAddress = originAddress;
        _originChain = originChain;
    }

    modifier emptyOwner() {
        require(_owner == address(0x00));
        _;
    }

    modifier onlyOwner() virtual {
        require(msg.sender == _owner);
        _;
    }

    function getOrigin() public view override returns (uint256, address) {
        return (_originChain, _originAddress);
    }

    function mint(address account, uint256 amount) external override onlyOwner {
        _mint(account, amount);
    }

    function burn(address account, uint256 amount) external override onlyOwner {
        _burn(account, amount);
    }

    function name() public view override returns (string memory) {
        return bytes32ToString(_name);
    }

    function symbol() public view override returns (string memory) {
        return bytes32ToString(_symbol);
    }

    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {
        if (_bytes32 == 0) {
            return new string(0);
        }
        uint8 cntNonZero = 0;
        for (uint8 i = 16; i > 0; i >>= 1) {
            if (_bytes32[cntNonZero + i] != 0) cntNonZero += i;
        }
        string memory result = new string(cntNonZero + 1);
        assembly {
            mstore(add(result, 0x20), _bytes32)
        }
        return result;
    }
}

contract SimpleTokenFactory {
    address private _template;
    constructor() {
        _template = SimpleTokenFactoryUtils.deploySimpleTokenTemplate(this);
    }

    function getImplementation() public view returns (address) {
        return _template;
    }
}

library SimpleTokenFactoryUtils {

    bytes32 constant internal SIMPLE_TOKEN_TEMPLATE_SALT = keccak256("SimpleTokenTemplateV1");

    bytes constant internal SIMPLE_TOKEN_TEMPLATE_BYTECODE = hex"60806040523480156200001157600080fd5b5060408051602080820180845260008084528451928301909452928152815191929091620000429160039162000061565b5080516200005890600490602084019062000061565b50505062000143565b8280546200006f9062000107565b90600052602060002090601f016020900481019282620000935760008555620000de565b82601f10620000ae57805160ff1916838001178555620000de565b82800160010185558215620000de579182015b82811115620000de578251825591602001919060010190620000c1565b50620000ec929150620000f0565b5090565b5b80821115620000ec5760008155600101620000f1565b600181811c908216806200011c57607f821691505b6020821081036200013d57634e487b7160e01b600052602260045260246000fd5b50919050565b610cb580620001536000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b3146100e857806318160ddd1461010b57806323b872dd1461011d578063313ce56714610130578063395093511461013f57806340c10f191461015257806358b917fd1461016757806370a082311461017a57806395d89b41146101a35780639dc29fac146101ab578063a457c2d7146101be578063a9059cbb146101d1578063dd62ed3e146101e4578063df1f29ee1461021d575b600080fd5b6100d2610240565b6040516100df9190610a5e565b60405180910390f35b6100fb6100f6366004610acf565b610252565b60405190151581526020016100df565b6002545b6040519081526020016100df565b6100fb61012b366004610af9565b610268565b604051601281526020016100df565b6100fb61014d366004610acf565b610317565b610165610160366004610acf565b610353565b005b610165610175366004610b35565b610378565b61010f610188366004610b74565b6001600160a01b031660009081526020819052604090205490565b6100d26103cd565b6101656101b9366004610acf565b6103da565b6100fb6101cc366004610acf565b6103fb565b6100fb6101df366004610acf565b610494565b61010f6101f2366004610b96565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600954600854604080519283526001600160a01b039091166020830152016100df565b606061024d6006546104a1565b905090565b600061025f33848461057b565b50600192915050565b60006102758484846106a0565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102ff5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61030c853385840361057b565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161025f91859061034e908690610bdf565b61057b565b6007546001600160a01b0316331461036a57600080fd5b610374828261085d565b5050565b6007546001600160a01b03161561038e57600080fd5b60078054336001600160a01b031991821617909155600594909455600692909255600880549093166001600160a01b0390921691909117909155600955565b606061024d6005546104a1565b6007546001600160a01b031633146103f157600080fd5b610374828261092a565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561047d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102f6565b61048a338585840361057b565b5060019392505050565b600061025f3384846106a0565b606060008290036104c057505060408051600081526020810190915290565b600060105b60ff81161561051757836104d98284610c0d565b60ff16602081106104ec576104ec610c32565b1a60f81b6001600160f81b0319161561050c576105098183610c0d565b91505b60011c607f166104c5565b506000610525826001610c0d565b60ff1667ffffffffffffffff81111561054057610540610bf7565b6040519080825280601f01601f19166020018201604052801561056a576020820181803683370190505b506020810194909452509192915050565b6001600160a01b0383166105dd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102f6565b6001600160a01b03821661063e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102f6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166107045760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102f6565b6001600160a01b0382166107665760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102f6565b6001600160a01b038316600090815260208190526040902054818110156107de5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102f6565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610815908490610bdf565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610c608339815191528460405161084f91815260200190565b60405180910390a350505050565b6001600160a01b0382166108b35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016102f6565b80600260008282546108c59190610bdf565b90915550506001600160a01b038216600090815260208190526040812080548392906108f2908490610bdf565b90915550506040518181526001600160a01b03831690600090600080516020610c608339815191529060200160405180910390a35050565b6001600160a01b03821661098a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016102f6565b6001600160a01b038216600090815260208190526040902054818110156109fe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016102f6565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a2d908490610c48565b90915550506040518281526000906001600160a01b03851690600080516020610c6083398151915290602001610693565b600060208083528351808285015260005b81811015610a8b57858101830151858201604001528201610a6f565b81811115610a9d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610aca57600080fd5b919050565b60008060408385031215610ae257600080fd5b610aeb83610ab3565b946020939093013593505050565b600080600060608486031215610b0e57600080fd5b610b1784610ab3565b9250610b2560208501610ab3565b9150604084013590509250925092565b60008060008060808587031215610b4b57600080fd5b843593506020850135925060408501359150610b6960608601610ab3565b905092959194509250565b600060208284031215610b8657600080fd5b610b8f82610ab3565b9392505050565b60008060408385031215610ba957600080fd5b610bb283610ab3565b9150610bc060208401610ab3565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bf257610bf2610bc9565b500190565b634e487b7160e01b600052604160045260246000fd5b600060ff821660ff84168060ff03821115610c2a57610c2a610bc9565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600082821015610c5a57610c5a610bc9565b50039056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212206bb2b0cf78e5d6253e140c0abd5a5fd267f940906e88b9bc9bab8b40e56888b664736f6c634300080e0033";

    bytes32 constant internal SIMPLE_TOKEN_TEMPLATE_HASH = keccak256(SIMPLE_TOKEN_TEMPLATE_BYTECODE);

    function deploySimpleTokenTemplate(SimpleTokenFactory templateFactory) internal returns (address) {
        /* we can use any deterministic salt here, since we don't care about it */
        bytes32 salt = SIMPLE_TOKEN_TEMPLATE_SALT;
        /* concat bytecode with constructor */
        bytes memory bytecode = SIMPLE_TOKEN_TEMPLATE_BYTECODE;
        /* deploy contract and store result in result variable */
        address result;
        assembly {
            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(result != address(0x00), "deploy failed");
        /* check that generated contract address is correct */
        require(result == simpleTokenTemplateAddress(templateFactory), "address mismatched");
        return result;
    }

    function simpleTokenTemplateAddress(SimpleTokenFactory templateFactory) internal pure returns (address) {
        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(templateFactory), SIMPLE_TOKEN_TEMPLATE_SALT, SIMPLE_TOKEN_TEMPLATE_HASH));
        return address(bytes20(hash << 96));
    }
}
